<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MOD.Web.Element</name>
    </assembly>
    <members>
        <member name="T:MOD.Web.Element.Element">
            <summary>
            Represents an Element in the DOM Tree.  This is either a Tag or Text.
            It has a type (the html tag as a string).  
            It can have a set of attributes represented as strings.
            It can have a list of child Elements.
            Extends Node and Implements the Renderable Interface.
            </summary>
        </member>
        <member name="T:MOD.Web.Element.Node">
            <summary>
            Node class. This is the base class for all Rednr classes
            </summary>
        </member>
        <member name="T:MOD.Web.Element.INode">
            <summary>
            INode interface. Usefull for polymorphism
            </summary>
        </member>
        <member name="M:MOD.Web.Element.INode.ToString(System.Text.StringBuilder)">
            <summary>
            Converts the node to a string.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="F:MOD.Web.Element.Node.Parent">
            <summary>
            A link to the parent node.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Node.ToString(System.Text.StringBuilder)">
            <summary>
            Renders the Node as a string.  Left virtual for child classes to implement.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:MOD.Web.Element.IRenderable">
            <summary>
            This interface can be used by any class/object that can be rendered
            to a Node.  Element itself knows to call this function on an 
            instance if it implements this interface.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.IRenderable.Render">
            <summary>
            This interface can be used by any class/object that can be rendered
            to a Node.  Element itself knows to call this function on an 
            instance if it implements this interface.
            </summary>
            <returns>An instance of Node</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.#ctor(System.String)">
            <summary>
            Construct the Element with the type specified by the string parameter.
            For example, new Element("a") will create an anchor tag.
            </summary>
            <param name="tag">The Tag type ("a","div","table","ul", etc) </param>
        </member>
        <member name="M:MOD.Web.Element.Element.Render">
            <summary>
            Render this element as a Node.
            </summary>
            <returns>Returns this (as a Node)</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.InitAttributes">
            <summary>
            Initializes the attributes member variable as an empty Dictionary, if it hasn't been initialized yet.
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Element.TagName">
            <summary>
            The Name of the tag represented by this Element.
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Element.children">
            <summary>
            Children of this Element.  Fragment is just a list of Nodes.
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Element.attributes">
            <summary>
            The Attributes of this Element, represented as key/value pairs.
            Generally represents classes, ID, inline styles, or tag specific attributes like src for Images or href for anchors.
            Can be anything though.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(System.Object[])">
            <summary>
            Add any supported type of object as a child of this Element.
            If the type is IEnumerable, each value in that set will be added individually.
            
            Supported Types:
            string, IEnumerable&lt;string&gt;, 
            Node, IEnumerable&lt;Node&gt;, 
            IEnumerable&lt;Element&gt;, 
            IRenderable, IEnumerable&lt;IRenderable&gt;,
            IEnumerable&lt;object&gt;,
            long, int, double (will be converted to a string and added as text)
            </summary>
            <param name="objectList">An array of objects</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Add an enumerable collection of objects of any support type as child Nodes.
            This iterates over the collection and calls the appropriate Add function based on 
            the type of that item.
            
            Supported Types:
            string, IEnumerable&lt;string&gt;, 
            Node, IEnumerable&lt;Node&gt;, 
            IEnumerable&lt;Element&gt;, 
            IRenderable, IEnumerable&lt;IRenderable&gt;,
            IEnumerable&lt;object&gt;,
            long, int, double (will be converted to a string and added as text)
            </summary>
            <param name="objectList">The Enumerable collection of objects</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(MOD.Web.Element.Fragment)">
            <summary>
            Adds a Fragment as child Nodes.
            </summary>
            <remarks>
            Because Fragment is both an IList and a Node, there is some Type
            ambiguity when it comes to which Add() method to use. This solves
            the Type ambiguity for adding an individual Fragment.
            </remarks>
            <param name="fragment"></param>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(MOD.Web.Element.Node[])">
            <summary>
            Adds an array of Nodes.  This converts the array to IEnumerable&lt;Node&gt; and adds that.
            </summary>
            <param name="nodeList">The array of Nodes to add</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(System.Collections.Generic.IEnumerable{MOD.Web.Element.Node})">
            <summary>
            Adds an IENumerable collection.  Each item will have its parent set to this and will then be 
            added to this's set of children.
            </summary>
            <param name="nodeList">the Enumerable collection of Nodes to add</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(System.String[])">
            <summary>
            Adds text that will be htmlencoded. Use AddHtml() to leave text unencoded.
            </summary>
            <param name="textList">An Array of strings to add (each string will become a text node)</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a collection of strings as text nodes.
            </summary>
            <param name="textList">The enumerable collection of strings to add (each string will become a text node).</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.AddText(System.String[])">
            <summary>
            Add an array of strings as child text nodes of this Element.
            The array will be converted to IEnumerable first.
            </summary>
            <param name="textList">An array of strings to add</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.AddText(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add an enumerable collection of strings
            Each string will become a separate child text node.
            </summary>
            <param name="textList">The enumerable collection of strings to add</param>
            <returns>This</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.AddHtml(System.String[])">
             <summary>
             Adds text that will NOT be htmlencoded.
             Had to compromise on the name; you can't have both a static and instance version of the same method.
             </summary>
            <param name="textList">Array of strings to be added as non-encoded text nodes </param>
            <returns>this</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.AddHtml(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Add an enumerable collection of strings that will not be HTML encoded.
             Each string will become a separate child text node.
             </summary>
             <param name="textList">The enumerable collection of strings to add</param>
            <returns>this</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.AddClass(System.String[])">
            <summary>
            Adds a class or classes into the class list of a node.
            In the attribute dictionary there is only one entry for "class".
            This is a string that has all the class names separated by spaces.
            </summary>
            <param name="classList">Class names to add</param>
            <returns>this</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.SetAttribute(System.String,System.String)">
            <summary>
            Sets an attribute to the given value. If the value is null the attribute is not set.
            </summary>
            <remarks>
            Since the attribute will not be set if the value is null, you can conditionally apply attributes inline 
            with something like Element.Create("option").SetAttribute("selected", value == selectedValue ? "selected" : null).
            </remarks>
            <param name="name">The name of the attribute whose value is going to be set</param>
            <param name="value">The new value of the attribute to be set</param>
            <returns>this</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.ParseTagName(System.String)">
            <summary>
            Sets the tag name of the element, parsing the given tag name expression for ids and classes specified as css selectors.
            </summary>
            <remarks>
            Class names can be separated by dots or by spaces.  This function looks for class names by tokenizing the string on dots '.'
            and then adds each class to the class attribute of this node, which just concatenates all class names into one string, separated by spaces.
            So "div#myId.class1.class2.class3" is the same as "div#myID.class1 class2 class3"
            </remarks>
            <example>
            div.myclass#myid
            </example>
            <param name="tagNameExpression">Name of the tag, possibly with \#id and .classnames appended</param>
        </member>
        <member name="F:MOD.Web.Element.Element.tagDelims">
            <summary>
             Valid delimiters for ParseTagName.  '#' for ID, '.' for class.  It doesn't do anything special with white space.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Element.ToString">
            <summary>
            Render this Element into html (convert this Element and its children into a string).
            </summary>
            <returns>String in HTML format representing this element and its children</returns>
        </member>
        <member name="M:MOD.Web.Element.Element.ToString(System.Text.StringBuilder)">
            <summary>
            Render this Element into html.  Adds the resulting string to the StringBuilder.
            </summary>
            <param name="sb">Stringbuilder object used to process the rendered HTML string.</param>
        </member>
        <member name="M:MOD.Web.Element.Element.ProcessAttributes(System.String[],MOD.Web.Element.SpecialHandling)">
            <summary>
            Apply the attributes specified in attribList to this element
            </summary>
            <remarks>
            attribList should have an even number of strings, unless the first one is a tag specifier ([a-zA-Z#.]+)
            </remarks>
            <param name="attribList">Array of key/value pairs as strings that represent attribute name, value</param>
            <param name="sh">SpecialHandling flag.  Denotes special cases for this tag.</param>
        </member>
        <member name="F:MOD.Web.Element.Element.ResolveUrlProvider">
            <summary>
            Provides the default value of ~/ as resolved by VirtualPathUtility.ToAbsolute, but
            isn't marked readonly so that an application can change this out on application start.
            This value should be set once for the life of the application -- doing otherwise is
            not defined and will likely not work the way you desire (don't change it while the
            web site is running -- it's intended to be inject with something suitable 
            during unit testing).
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Element.SpecialHandlingMap">
            <summary>
            Html tags special handling lookup
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Element.LinkAttributeMap">
            <summary>
            These attributes usually contain urls.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Element.Create(System.String,System.String[])">
            <summary>
            The Create method. TagName, Parameters. Parameters are listed in pairs
            </summary>
            <example>
            Element.Create("div","class","myclass","id","myid");
            </example>
        </member>
        <member name="M:MOD.Web.Element.Element.Create(System.String,System.String[],MOD.Web.Element.SpecialHandling)">
            <summary>
            The Create method with special handling. TagName, Parameters. Parameters are listed in pairs
            </summary>
            <example>
            Element.Create("div","class","myclass","id","myid", SpecialHandling.SelfClosing);
            </example>
        </member>
        <member name="M:MOD.Web.Element.Element.ProcessUrl(System.String)">
            <summary>
            Special handling for urls; converts "~/" urls ToAbsolute 
            </summary>
            <param name="url">string, the URL to process</param>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Text(System.String)">
            <summary>
            Adds text that will be encoded.
            </summary>
            <param name="text">string to be added</param>
        </member>
        <member name="M:MOD.Web.Element.Element.Text(System.String[])">
            <summary>
            Converts an array of strings into one string and adds it as a new text Node.  It will be HTML encoded.
            </summary>
            <param name="text">array of strings to be added</param>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Element.Html(System.String)">
            <summary>
            Adds text that will NOT be htmlencoded.
            </summary>
            <param name="text">string to be added</param>
        </member>
        <member name="M:MOD.Web.Element.Element.Html(System.String[])">
            <summary>
            Converts an array of strings into one string and adds it as a new text Node.  Will not be HTML encoded.
            </summary>
            <param name="text">array of strings to be added</param>
            <returns></returns>
        </member>
        <member name="P:MOD.Web.Element.Element.Children">
            <summary>
            Children contains all child nodes (is a Fragment)
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Element.Attributes">
            <summary>
            The attributes for this Element as a dictionary of strings.
            Attributes being everything specified in the tag such as inline style, href, width, height, src, etc.
            Note that this dictionary is case Insensitive.
            </summary>
        </member>
        <member name="T:MOD.Web.Element.SpecialHandling">
            <summary>
            Special Handling flag.
            </summary>
            <remarks>
            This has a bug.  The enum is supposed to be a set of flags which are handled by bitmasking operations (and/or).
            The problem is that Suppress = 1, Link = 2, SelfClosing = 3.  So instead of those three being distinct flags, SelfClosing = Suppress + Link.
            There is no way to specify self closing without also specifying Suppress and Link.
            Apparently this is not a problem as of now, but hopefully one day SelfClosing will be set to 0x4 or some other distinct value.
            
            Suppress		//don't do special processing
            Link			//process "~/" urls
            SelfClosing		//doesn't have children so never print the end tag ( <br/> )
            </remarks>
        </member>
        <member name="F:MOD.Web.Element.SpecialHandling.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:MOD.Web.Element.SpecialHandling.Suppress">
            <summary>
            Don't do any special processing
            </summary>
        </member>
        <member name="F:MOD.Web.Element.SpecialHandling.Link">
            <summary>
            Process "~/" urls
            </summary>
        </member>
        <member name="F:MOD.Web.Element.SpecialHandling.SelfClosing">
            <summary>
            Doesn't have children so never print the end tag ( <br/> )
            </summary>
        </member>
        <member name="T:MOD.Web.Element.Fragment">
            <summary>
            Fragment: a collection on nodes. Use this when you don't have a parent element
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Add(MOD.Web.Element.Node)">
            <summary>
            Adds a Node to the fragment.
            </summary>
            <param name="item">The Node to Add</param>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Add(System.Object[])">
            <summary>
            Add a list of objects of any type to the fragment
            Supported types are:
            string, long, int, double
            IEnumerable&lt;string&gt;
            Node
            IEnumerable&lt;Node&gt;
            IEnumerable&lt;Element&gt;
            IEnumerable&lt;object&gt;
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Fragment.AddRange(System.Collections.Generic.IEnumerable{MOD.Web.Element.Node})">
            <summary>
            Adds the collection to the end of the Fragment
            </summary>
            <param name="collection">Enumerable set of nodes to add</param>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.ToString(System.Text.StringBuilder)">
            <summary>
            Take each object in this node, convert it to a string, and add it to the StringBuilder
            </summary>
            <param name="sb">The StringBuilder to which all the stringified objects will be added</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.ToString">
            <summary>
            Create a StringBuilder, add all the contents of the Fragment to that StringBuilder, and retrieve the built string
            </summary>
            <returns>One string containing the string values of all the objects in the fragment</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{MOD.Web.Element.Node})">
            <summary>
            Inserts the elements of a collection into the List&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.System#Collections#Generic#ICollection{MOD#Web#Element#Node}#Add(MOD.Web.Element.Node)">
            <summary>
            Adds an item to the ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to add to the ICollection&lt;T&gt;.</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Clear">
            <summary>
            Removes all items from the ICollection&lt;T&gt;.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Contains(MOD.Web.Element.Node)">
            <summary>
            Gets the number of elements contained in the ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the ICollection&lt;T&gt;.</param>
            <returns>true if item is found in the ICollection&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.CopyTo(MOD.Web.Element.Node[],System.Int32)">
            <summary>
            Gets the number of elements contained in the ICollection&lt;T&gt;.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.IndexOf(MOD.Web.Element.Node)">
            <summary>
            Determines the index of a specific item in the IList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the IList&lt;T&gt;.</param>
            <returns>The object to locate in the IList&lt;T&gt;.</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Insert(System.Int32,MOD.Web.Element.Node)">
            <summary>
            Inserts an item to the IList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the IList&lt;T&gt;.</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Remove(MOD.Web.Element.Node)">
            <summary>
            Removes the first occurrence of a specific object from the ICollection&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the ICollection&lt;T&gt;.</param>
            <returns>true if item was successfully removed from the ICollection&lt;T&gt;; otherwise, false. This method also returns false if item is not found in the original ICollection&lt;T&gt;.</returns>
        </member>
        <member name="M:MOD.Web.Element.Fragment.RemoveAt(System.Int32)">
            <summary>
            Removes the IList&lt;T&gt; item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:MOD.Web.Element.Fragment.Render">
            <summary>
            Renders a Fragment to a Node.
            </summary>
            <returns>A Node instance.</returns>
        </member>
        <member name="P:MOD.Web.Element.Fragment.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Fragment.Count">
            <summary>
            Gets the number of elements contained in the ICollection&lt;T&gt;.
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Fragment.IsReadOnly">
            <summary>
            Gets a value indicating whether the ICollection&lt;T&gt; is read-only.
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Fragment.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:MOD.Web.Element.Modules.HtmlDocument">
            <summary>
            
            </summary>
        </member>
        <member name="T:MOD.Web.Element.Modules.ViewModule">
            <summary>
            
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Modules.ViewModule._Container">
            <summary>
            
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Modules.ViewModule.Render">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MOD.Web.Element.Modules.ViewModule.CreateContainer">
            <summary>
            Implement this method to override control the Container Element that is created for each instance
            </summary>
            <returns>Container Element</returns>
        </member>
        <member name="P:MOD.Web.Element.Modules.ViewModule.Container">
            <summary>
            The Element that represents markup for the module.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Modules.HtmlDocument.#ctor">
            <summary>
            Setups the parts of a default page.
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.Body">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.Head">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.Language">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.Charset">
            <summary>
            
            </summary>
        </member>
        <member name="P:MOD.Web.Element.Modules.HtmlDocument.PageView">
            <summary>
            
            </summary>
        </member>
        <member name="T:MOD.Web.Element.Text">
            <summary>
            Represents a Node that is only text, no children and not a tag.
            Used for storing text-only data in the DOM tree.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Text.#ctor">
            <summary>
            Default constructor.  Does nothing.
            </summary>
        </member>
        <member name="M:MOD.Web.Element.Text.#ctor(System.String[])">
            <summary>
            Creates the text node containing one string that is the concatenation of the array of strings specified.
            </summary>
            <param name="text">An array of strings that are the text of this node.  Will be joined into one long string.</param>
        </member>
        <member name="M:MOD.Web.Element.Text.#ctor(System.String)">
            <summary>
            Initializes the Node to contain the string specified.  Specifies that any HTML in the string will be encoded.
            </summary>
            <param name="text">The string that will be the contents of this Node.</param>
        </member>
        <member name="M:MOD.Web.Element.Text.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes the node to contain the specified string, with the option to be encoded or not.
            </summary>
            <param name="text">The text to contain.</param>
            <param name="leaveRaw">True for strings that should not be HTML-encoded.  False will cause the string to be HTML encoded when it is rendered.</param>
        </member>
        <member name="M:MOD.Web.Element.Text.ToString(System.Text.StringBuilder)">
            <summary>
            Converts the node to a string and appends it to the specified StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to which the string contents will be appended</param>
        </member>
        <member name="M:MOD.Web.Element.Text.ToString">
            <summary>
            Gets the string contained in this Node.
            </summary>
            <returns>A string, which will be HTML-encoded if leaveRaw was set to false (or not specified, as this is the default behavior).</returns>
        </member>
        <member name="F:MOD.Web.Element.Text.IsEncoded">
            <summary>
            If true, will convert HTML to URL-friendly format.
            " =&gt; &amp;quot;
            &amp; =&gt; &amp;amp;
            ' =&gt; &amp;#39;
            &lt; =&gt; &amp;lt;
            &gt; =&gt; &amp;gt;
            </summary>
        </member>
        <member name="F:MOD.Web.Element.Text.Value">
            <summary>
            The actual string value.
            </summary>
        </member>
    </members>
</doc>
